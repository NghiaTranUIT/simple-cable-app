#!/usr/bin/env ruby

# frozen_string_literal: true

ENV['USE_ANYCABLE'] = '1'
ENV['RAILS_ENV'] ||= 'production'

require_relative "./app"
require "anycable-rails"

Rails.application.initialize!

unless ENV['SKIP_ANYCABLE_GO']
  go_thread = Thread.new do
    Process.wait Process.spawn("anycable-go")
    raise "Anycable-Go failed!"
  end

  go_thread.abort_on_exception = true
end

if ENV["OBJECT_TRACE"]
  require_relative "./memprof"

  ANYCABLE_SOURCES = /(anycable|grpc|protobuf)/

  def start_trace
    puts "Start allocation tracing\n"
    Memprof.start
  end

  def print_trace
    puts "Print allocation tracing\nTotal clients connected after warmup: #{COUNTER.value - WARMUP_COUNT}"

    Memprof.report(mapping: { action_cable: ACTIONCABLE_SOURCES, anycable: ANYCABLE_SOURCES, other: /.*/ }, ignore: [])
  end

  class ProfilerInterceptor < GRPC::ServerInterceptor
    def request_response(request:, call:, method:)
      return super unless request.is_a?(Anycable::ConnectionRequest)
      COUNTER.increment
      response = yield
      start_trace if COUNTER.value == WARMUP_COUNT
      val = COUNTER.value
      if val > WARMUP_COUNT && ((val - WARMUP_COUNT) % TRACE_INTERVAL) == 0
        print_trace
        start_trace
      end
      response
    end
  end

  Anycable::Server.singleton_class.prepend(Module.new do
    def build_server
      p "Build server with ProfilerInterseptor"
      GRPC::RpcServer.new(interceptors: [ProfilerInterceptor.new]).tap do |server|
        server.add_http2_port(Anycable.config.rpc_host, :this_port_is_insecure)
        server.handle(Anycable::RPCHandler)
      end
    end
  end)
end

Anycable::Server.start
